---
title: "R Shiny - Part II"
author: Lokesh Mano
institute: NBIS, SciLifeLab
keywords: bioinformatics, course, workshop, scilifelab, nbis
format: 
  revealjs: 
    slide-number: true
---

## Setup {visibility="hidden"}

```{r,include=FALSE}
# load the packages you need
library(dplyr)
library(tidyr)
library(tidyverse)
#library(stringr)
library(ggplot2)
#library(plotly)
#library(pheatmap)
#library(DESeq2)
#library(edgeR)
library(kableExtra)
```

## Contents

* [Reactivity](#reactivity)
* [Isolate reactivity](#isolate-reactivity)
* [observeEvent()](#observeevent())
* [Updating Widgets](#updating-widgets)
* [Error Validation](#error-validation)
* [Download Button](#download-•-data)
* [Modularizing reactivity](#modularizing-reactivity)

## Reactivity

::: {.center-xy}

![](../../assets/images/react-code1.png){height="80%" width="80%" fig-align="center"}

:::

## Reactivity

::: {.center-xy}

![](../../assets/images/react-code2.png){height="80%" width="80%" fig-align="center"}

:::

## Reactivity

::: {.center-xy}

![](../../assets/images/react-code3.png){height="80%" width="80%" fig-align="center"}

:::

## Reactivity

::: {.center-xy}

![](../../assets/images/react-code4.png){height="80%" width="80%" fig-align="center"}

:::

## Reactivity

::: {.center-xy}

![](../../assets/images/react5.png){height="80%" width="80%" fig-align="center"}

:::

## Reactivity

::: {.center-xy}

![](../../assets/images/react6.png){height="80%" width="80%" fig-align="center"}

:::

## Isolate reactivity

* Reactivity can be controlled.

:::: {.fragment}

* You will notice that as soon as you try to change the title, the histogram will update with new values

::: {.center-xy}

![](../../assets/images/isolate1.png){height="60%" width="60%" fig-align="center"}

:::

::::

## Isolate reactivity

::: {.center-xy}

![](../../assets/images/isolate2.png){height="80%" width="80%" fig-align="center"}

:::

## Isolate reactivity

::: {.center-xy}

![](../../assets/images/isolate3.png){height="60%" width="60%" fig-align="center"}

:::

## Isolate reactivity

::: {.center-xy}

![](../../assets/images/isolate4.png){height="80%" width="80%" fig-align="center"}

:::

## observeEvent()

::: {.center-xy}

![](../../assets/images/observe.png){height="80%" width="80%" fig-align="center"}

:::

## Updating widgets

* Widgets can be updated once initialised.
* Add third argument **session** to server function

```{r, eval=FALSE}
server=function(input,output,session){}
```

::: {.fragment}

* Example of a typical UI

```{r, eval=FALSE}
ui=fluidPage(
  selectInput("select-input",label="selectInput",choices=c("A","B","C")),
  numericInput("numeric-input",label="numericInput",value=5,min=1,max=10),
  sliderInput("slider-input",label="sliderInput",value=5,min=1,max=10),
)
```

:::

## Updating widgets

* Update functions can be used to update **input widgets**
* Reactive observer `observe({})` monitors for a conditional change

::: {.fragment}

```{r, eval=FALSE}
server=function(input,output,session) {
  observe({
    if(something) {
      updateSelectInput(session,"select-input",label="selectInput",choices=c("D","E","F"))
      updateNumericInput(session,"numeric-input",label="numericInput",value=10,min=1,max=10)
      updateSliderInput(session,"slider-input",label="sliderInput",value=8,min=1,max=10)
    }
  })
}
```

:::

## Error validation

* Shiny returns an error with missing or incorrect values

:::: {.fragment} 

::: {.column width="65%"}
```{r,eval=FALSE}
shinyApp(
ui=fluidPage(
  selectInput("data_input",label="Select data",
              choices=c("","mtcars","faithful","iris")),
  tableOutput("table_output")
),
server=function(input, output) {
  getdata <- reactive({ get(input$data_input,'package:datasets') })
  output$table_output <- renderTable({head(getdata())})
})
```

:::

::: {.column width="5%"}
:::

::: {.column width="30%"}

![](../../assets/images/val1.png)

:::

::::

:::: {.fragment}

* Errors can be handled in a controlled manner

::::

## Error validation

::: {.incremental}

* `validate()` can be used to check input
* `validate()` using `need()`

:::

:::: {.fragment}

::: {.column width="65%"}

```{r, eval= FALSE}
shinyApp(
ui=fluidPage(
  selectInput("data_input",label="Select data",
              choices=c("","mtcars","faithful","iris")),
  tableOutput("table_output")
),
server=function(input, output) {
  getdata <- reactive({ 
  validate(need(try(input$data_input),"Please select a data set"))
    get(input$data_input,'package:datasets') 
    })
  output$table_output <- renderTable({head(getdata())})
})
```

:::

::: {.column width="5%"}
:::

::: {.column width="30%"}

![](../../assets/images/val2.png)

:::

::::

## Error validation

* `validate()` using custom function

:::: {.fragment}

::: {.column width="65%"}

```{r, eval=FALSE}
valfn <- function(x) if(is.null(x) | is.na(x) | x=="") return("Input data is incorrect.")
shinyApp(
ui=fluidPage(
  selectInput("data_input",label="Select data",
              choices=c("","mtcars","faithful","iris")),
  tableOutput("table_output")
),
server=function(input,output) {
  getdata <- reactive({ 
  validate(valfn(try(input$data_input)))
    get(input$data_input,'package:datasets')
    })
  output$table_output <- renderTable({head(getdata())})
})
```
:::

::: {.column width="5%"}
:::

::: {.fragment .column width="30%"}

![](../../assets/images/val3.png)

:::

::::

:::: {.fragment}

* `shiny::req()` checks input variable and silently stops execution

::::

## Download • Data

* Add button and `downloadHandler()` function

```{r, eval=FALSE}
shinyApp(
ui=fluidPage(
  selectInput("data_input",label="Select data",
              choices=c("mtcars","faithful","iris")),
  textOutput("text_output"),
  downloadButton("button_download","Download")
),
server=function(input, output) {
  getdata <- reactive({ get(input$data_input, 'package:datasets') })
  output$text_output <- renderText(paste0("Selected dataset: ",input$data_input))
  
  output$button_download <- downloadHandler(
  filename = function() {
     paste0(input$data_input,".csv")
   },
  content = function(file) {
     write.csv(getdata(),file,row.names=FALSE,quote=F)
   })
})
```

* Run in system browser if Rstudio browser doesn't work
* See usage of download buttons

## Download • Plots

```{r, eval=FALSE}
shinyApp(
ui=fluidPage(
  selectInput("data_input",label="Select data",
              choices=c("mtcars","faithful","iris")),
  textOutput("text_output"),
  plotOutput("plot_output",width="400px"),
  downloadButton("button_download", "Download")
),
server=function(input, output) {
  getdata <- reactive({ get(input$data_input, 'package:datasets') })
  output$text_output <- renderText(paste0("Selected dataset: ",input$data_input))
  output$plot_output <- renderPlot({hist(getdata()[, 1])})
  
output$button_download <- downloadHandler(
  filename = function() {
    paste0(input$data_input,".png")
  },
  content = function(file) {
    png(file)
    hist(getdata()[, 1])
    dev.off()
  })
})
```

* Run in system browser if Rstudio browser doesn't work
* See usage of download buttons

## Modularizing Reactivity

::: {.center-xy}

![](../../assets/images/shiny-mod.png){height="80%" width="80%" fig-align="center"}

:::


## {background-image="../../assets/images/precourse/data_viz_adv_2.jpeg"}

::: {.center-xy}

### Thank you. Questions? {style="text-align: center;"}
Slide inspirations: Roy Francis (NBIS, RaukR2024)

:::


